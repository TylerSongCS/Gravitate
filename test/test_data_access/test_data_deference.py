from unittest import TestCase
from google.cloud import firestore
from google.cloud import datastore
from gravitate import context
from gravitate.data_access.database_types import DataReference
import datetime

CTX = context.Context
db = CTX.db

datastore_client = datastore.Client(project="gravitate-dsfb-testing")


def add_task():
    """ Adds an entity to datastore (used for testing).

    Ref: https://cloud.google.com/datastore/docs/datastore-api-tutorial

    :return:
    """
    key = datastore_client.key('Task')

    task = datastore.Entity(
        key, exclude_from_indexes=['description'])

    task.update({
        'created': datetime.datetime.utcnow(),
        'description': "generated by test_data_reference.py file",
        'done': False
    })

    datastore_client.put(task)

    return task.key


class TestDataReference(TestCase):

    def setUp(self):
        self.firestore_ref: firestore.DocumentReference = db.collection("testcollectionid").document("testreferenceid")
        self.datastore_key: datastore.Key = add_task()

    def tearDown(self):
        self.firestore_ref.delete()
        datastore_client.delete(self.datastore_key)

    def test_init_with_firestore_ref(self):
        self.data_reference: DataReference = DataReference(self.firestore_ref)
        self.assertIsNotNone(self.data_reference._firestore_reference, "obj._firestore_reference should be set")
        self.assertEqual(self.data_reference._reference_type, firestore.DocumentReference)
        self.assertIsNone(self.data_reference._datastore_key, "obj._datastore_key should not be set")
        self.assertNotEqual(self.data_reference._reference_type, datastore.Key)

    def test_init_with_datastore_key(self):
        """
        TODO: check https://cloud.google.com/python/getting-started/using-cloud-datastore
        :return:
        """
        self.data_reference: DataReference = DataReference(self.datastore_key)
        self.assertIsNotNone(self.data_reference._datastore_key, "obj._datastore_key should be set")
        self.assertEqual(self.data_reference._reference_type, datastore.Key)
        self.assertIsNone(self.data_reference._firestore_reference, "obj._firestore_ref should not be set")
        self.assertNotEqual(self.data_reference._reference_type, firestore.DocumentReference)

    def test__get_reference_datastore(self):
        self.data_reference: DataReference = DataReference(self.datastore_key)
        get_reference_result = self.data_reference._get_reference()
        self.assertEqual(get_reference_result, self.datastore_key, "obj._datastore_key should be returned")
        self.assertIsInstance(get_reference_result, datastore.Key)

    def test__get_reference_firestore(self):
        self.data_reference: DataReference = DataReference(self.firestore_ref)
        get_reference_result = self.data_reference._get_reference()
        self.assertEqual(get_reference_result, self.firestore_ref, "obj._firestore_ref should be returned")
        self.assertIsInstance(get_reference_result, firestore.DocumentReference)

    def test__set_reference_datastore(self):
        self.data_reference: DataReference = DataReference(self.datastore_key)
        self.assertIsNotNone(self.data_reference._datastore_key, "obj._datastore_key should be set")
        self.assertEqual(self.data_reference._reference_type, datastore.Key)

    def test__set_reference_firestore(self):
        self.data_reference: DataReference = DataReference(self.firestore_ref)
        self.assertIsNotNone(self.data_reference._firestore_reference, "obj._firestore_reference should be set")
        self.assertEqual(self.data_reference._reference_type, firestore.DocumentReference)

